# coding: utf-8
"""Logic for interacting with eWay."""

from __future__ import unicode_literals

import datetime
import json

from flask.ext import login
import flask
import requests

from eisitirio import app
from eisitirio.database import db
from eisitirio.database import models

APP = app.APP
DB = db.DB

def _send_request(endpoint, data, transaction):
    """Helper to send requests to the eWay API.

    Formats the data payload, sets up authorisation headers, and sends the
    request to the eWay API.

    Args:
        endpoint: (str) the API endpoint to send the request to
        data: (dict or None) a dictionary of data to serialise and send to
            eWay

    Returns:
        (bool, dict) whether the request was successful, and any data
        returned by the API
    """
    url = APP.config['EWAY_API_BASE'] + endpoint + '.json'
    payload = json.dumps(data)
    headers = {
        'Content-Type': 'application/json',
        'Authorization': 'Basic {0}'.format(
            APP.config['EWAY_API_PASSCODE']
        )
    }

    try:
        request = requests.post(url, data=payload, headers=headers)
    except requests.ConnectionError as exc:
        APP.log_manager.log_event(
            'Failed request to eWay endpoint {0} with error {1}'.format(
                endpoint,
                exc
            ),
            transaction=transaction
        )
        return (False, None)

    if request.status_code == 200:
        return (True, request.json())
    else:
        APP.log_manager.log_event(
            (
                'Failed request to eWay endpoint {0} returning status {1}'
            ).format(
                endpoint,
                request.status_code
            ),
            transaction=transaction
        )
        return (False, None)

def get_payment_url(transaction):
    """Get a URL for the payment gateway.

    Sends a request to eWay with the users information and transaction
    amount, and returns the URL generated by eWay that the user should be
    redirected to to carry out payment.

    Returns:
        (str) What URL the user should be redirected to to carry out payment
    """
    data = {
        'Customer': {
            'Reference': 'U{0:05d}'.format(transaction.user.object_id),
            'FirstName': transaction.user.forenames,
            'LastName': transaction.user.surname,
            'Email': transaction.user.email
        },
        'Payment': {
            'TotalAmount': transaction.value,
            'InvoiceReference': 'Trans{0:05d}'.format(
                transaction.object_id
            ),
            'CurrencyCode': 'GBP'
        },
        'RedirectUrl': flask.url_for('purchase.eway_success',
                                     object_id=transaction.object_id,
                                     _external=True),
        'CancelUrl': flask.url_for('purchase.eway_cancel',
                                   object_id=transaction.object_id,
                                   _external=True),
        'Method': 'ProcessPayment',
        'TransactionType': 'Purchase',
        'LogoUrl': flask.url_for('static', filename='images/eway_logo.png',
                                 _external=True, _scheme='https'),
        'HeaderText': APP.config['TITLE'],
        'Language': 'EN',
        'CustomerReadOnly': True
    }

    (success, response) = _send_request('CreateAccessCodeShared', data,
                                        transaction)

    if success and response['Errors'] is None:
        transaction.eway_transaction = models.EwayTransaction(
            response['AccessCode'],
            transaction.value
        )
        DB.session.commit()

        APP.log_manager.log_event(
            'Started Card Payment',
            tickets=transaction.tickets,
            user=login.current_user,
            transaction=transaction
        )

        return response['SharedPaymentUrl']
    else:
        flask.flash(
            (
                'There is a problem with our payment provider, please '
                'try again later'
            ),
            'error'
        )
        return None

def process_payment(transaction):
    """Check if the transaction has been completed, and update the database.

    Intended to be called by the eWay callback, queries the eWay API for the
    result of the transaction (whether payment was completed) and updates
    the persisted state of this transaction object and related ticket
    objects
    """
    eway = transaction.eway_transaction

    data = {'AccessCode': eway.access_code}

    (success, response) = _send_request('GetAccessCodeResult', data,
                                        transaction)

    if success:
        eway.completed = datetime.datetime.utcnow()
        eway.result_code = response['ResponseCode']
        eway.eway_id = response['TransactionID']
        eway.charged = response['TotalAmount']
        DB.session.commit()

        if eway.status:
            if eway.result_code == '10':
                APP.log_manager.log_event(
                    (
                        'Partial eWay payment for transaction {0} '
                        'with value {1}'
                    ).format(
                        transaction.object_id,
                        response['TotalAmount']
                    ),
                    tickets=transaction.tickets,
                    user=transaction.user,
                    transaction=transaction
                )

                refund_success = process_refund(transaction,
                                                response['TotalAmount'])

                if refund_success:
                    flask.flash(
                        (
                            'Your card payment was only authorised '
                            'for a partial amount, and has '
                            'subsequently been automatically '
                            'reversed. Please check that you have '
                            'enough available funds in your account, '
                            'and then attempt payment again. If in '
                            'doubt, pay for your tickets one-by-one '
                            'to limit the value of the individual '
                            'transactions.'
                        ),
                        'warning'
                    )
                else:
                    APP.email_manager.send_template(
                        [
                            APP.config['TREASURER_EMAIL'],
                            APP.config['TICKETS_EMAIL']
                        ],
                        'Partial Ticket Payment',
                        'partial_payment.email',
                        transaction=transaction,
                        ewayresponse=response
                    )
                    flask.flash(
                        (
                            'Your card payment was only approved for '
                            'a partial amount. An email has been '
                            'sent to {0} staff, and the '
                            'partial payment will be reversed. After '
                            'this, you will be contacted via email, '
                            'and you should then reattempt payment. '
                            'Please check that you have enough '
                            'available funds in your account to '
                            'complete payment for the full amount, '
                            'and that you have no transaction '
                            'limits. If in doubt, please pay for '
                            'your tickets one-by-one.'
                        ).format(
                            APP.config['BALL_NAME']
                        ),
                        'warning'
                    )
            else:
                transaction.mark_as_paid()

                DB.session.commit()

                APP.log_manager.log_event(
                    'Completed Card Payment',
                    tickets=transaction.tickets,
                    user=transaction.user,
                    transaction=transaction
                )

                flask.flash(
                    'Your payment has completed successfully',
                    'success'
                )
        else:
            flask.flash(
                'The card payment failed. You have not been charged.',
                'error'
            )

        return eway.status[0]
    else:
        flask.flash(
            (
                'There is a problem with our payment provider, '
                'please contact <a href="{0}">the treasurer</a> '
                'giving reference "Trans{1:05d}" to confirm that '
                'payment has not been taken before trying again'
            ).format(
                APP.config['TREASURER_EMAIL_LINK'],
                transaction.object_id
            ),
            'error'
        )
        return None

def cancel_payment(transaction):
    """Mark the payment as cancelled."""
    transaction.eway_transaction.completed = datetime.datetime.utcnow()
    transaction.eway_transaction.result_code = 'CX'

    flask.flash(
        'Your payment has been cancelled; you have not been charged.',
        'info'
    )

    DB.session.commit()

    APP.log_manager.log_event(
        'Cancelled Card Payment',
        tickets=transaction.tickets,
        user=transaction.user,
        transaction=transaction
    )

def process_refund(transaction, amount):
    """Refund some amount of money to the customer.

    Sends a request to the eWay API requesting that the given amount is
    refunded back to the customers card.

    Args:
        amount: (int) amount to refund in pence

    Returns:
        (bool) whether the refund was successful
    """
    eway = transaction.eway_transaction

    data = {
        'Refund': {
            'TotalAmount': amount,
            'TransactionID': eway.eway_id
        }
    }

    (success, response) = _send_request('DirectRefund', data, transaction)

    if success and response['TransactionStatus']:
        refunded_amount = response['Refund']['TotalAmount']

        eway.refunded += refunded_amount
        DB.session.commit()

        APP.log_manager.log_event(
            'Refunded £{0:.02f}'.format(
                refunded_amount / 100.0
            ),
            user=login.current_user,
            transaction=transaction
        )

        if refunded_amount != amount:
            APP.email_manager.send_template(
                [
                    APP.config['TREASURER_EMAIL'],
                    APP.config['TICKETS_EMAIL']
                ],
                'Partial Refund',
                'partial_refund.email',
                transaction=transaction,
                ewayresponse=response
            )

            flask.flash(
                (
                    'Your card refund was only approved for '
                    'a partial amount. An email has been '
                    'sent to {0} staff, and the '
                    'refund will be manually completed.'
                ).format(
                    APP.config['BALL_NAME']
                ),
                'warning'
            )

        return True
    else:
        APP.log_manager.log_purchase('warning', str(response))
        return False
